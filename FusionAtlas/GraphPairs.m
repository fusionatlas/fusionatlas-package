(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["FusionAtlas`GraphPairs`",{"FusionAtlas`","FusionAtlas`Bigraphs`","FusionAtlas`Debugging`","FusionAtlas`Java`","FusionAtlas`JavaOdometer`","FusionAtlas`DisplayGraphs`"}];


BigraphWithDuals::usage="A wrapper for things of the form BigraphWithDuals[GradedBigraph[blah],DualData[blah]]";
GraphWithDuals;


DualData::usage="DualData is a wrapper where each entry describes which vertices are meant to be dual to each other, for example DualData[{1},{2,1}] means that at the first even depth the only vertex is self-dual while at the second even depth the two vertices are dual to each other";


OcneanuDisplay::usage="OcneanuDisplay[gd1_BigraphWithDuals,gd2_BigraphWithDuals] shows the 4-partite graph corresponding to a pair of graphs with dual data."


HaagerupWithDuals;DualHaagerupWithDuals;HaagerupAsaedaWithDuals;DualHaagerupAsaedaWithDuals;


TwistBigraph;
FullOcneanuTest::usage="FullOcneanuTest[gd1_BigraphWithDuals,gd2_BigraphWithDuals] applies Ocneanu's Hom-space counting test to a pair of bigraphs with dual data.";
PartialOcneanuTest::usage="FullOcneanuTest[gd1_BigraphWithDuals,gd2_BigraphWithDuals] applies Ocneanu's Hom-space counting test to a pair of partial (i.e. they might be extended to greater depth later) bigraphs with dual data,";


DualDataList::usage="Takes the number of vertices at a given even level and returns ";
CompatibleDualDataList::usage="Takes a bigraph and returns all possible dual data which at all even levels";
CheckDualDimensions::usage="Takes a bigraph with dual data and checks whether dual objects have the same dimensions.  So don't run it on partial graphs.";


GraphPairsIsomorphicQ;
ClearGraphPairsCachedValues;


PermuteToReduceCrossings;


GraphVertices;DirectionsFromVertices;EdgesAdjacentTo;GraphPathsFrom;GraphPathsTo;GraphPathsBetween;GraphPaths;GraphLoops;ConcatenatePaths;PathLength;ReverseLoop;Vertex;SplitPathAt;PathToLoop;


TruncatesToOneOfQ;RemoveDuplicates;


ScalaTriplePointObstruction;StabilitySequence;CylinderQ;CylinderObstruction;


Begin["`Private`"];


KnownObstructions[{g1_BigraphWithDuals,g2_BigraphWithDuals}]:=Union[KnownObstructions[g1[[1]]],KnownObstructions[g2[[1]]]]


GraphRank[{g1_BigraphWithDuals,g2_BigraphWithDuals}]:=GraphRank[{g1,g2}]=GraphRank[g1]+GraphRank[g2]


GraphDepth[{g1_BigraphWithDuals,g2_BigraphWithDuals}]:=Max[GraphDepth[g1],GraphDepth[g2]]


DimensionsByDepth[g_BigraphWithDuals]:=DimensionsByDepth[g[[1]]]
DimensionsByDepth[G:{_BigraphWithDuals,_BigraphWithDuals}]:=DimensionsByDepth/@G


GraphVertices[g:{_BigraphWithDuals,_BigraphWithDuals},{i_,j_}]:=
GraphVertices[g,{i,j}]=Flatten[Table[Vertex[i,j,d,k],{d,Mod[i-j,2],GraphDepth[g[[i+1]]],2},{k,1,RankAtDepth[g[[i+1]],d]}]]


DirectionsFromVertices[over:{({0,0}|{0,1}|{1,1}|{1,0})...}]:=Partition[over,2,1]/.{v1_,v2_}:>Abs[v1-v2]/.{{0,1}->"R",{1,0}->"L"}


EdgesAdjacentTo[g:{_BigraphWithDuals,_BigraphWithDuals},Vertex[i_,j_,d_,k_],towards:{0,0}|{0,1}|{1,1}|{1,0}]:=EdgesAdjacentTo[g,Vertex[i,j,d,k],towards]=Flatten[FromScalaObject[AsScalaObject[g]@graphVertices[]@apply[i]@apply[d]@apply[k-1]@neighbourMultiplicities[DirectionsFromVertices[{{i,j},towards}][[1]]]]/.{v_Vertex,m_Integer}:>Table[{v,n},{n,1,m}],1]


GraphPathsFrom[g:{_BigraphWithDuals,_BigraphWithDuals},initial:Vertex[i_,j_,d_,k_],over:{({0,0}|{0,1}|{1,1}|{1,0})...}]:=FromScalaObject[AsScalaObject[g]@graphVertices[]@apply[i]@apply[d]@apply[k-1]@pathsFromStringDirections[AsScalaList[DirectionsFromVertices[over]]]]


GraphPathsTo[g:{_BigraphWithDuals,_BigraphWithDuals},final_Vertex,over:{({0,0}|{0,1}|{1,1}|{1,0})...}]:=Reverse/@GraphPathsFrom[g,final,Reverse[over]]


GraphPathsBetween[g:{_BigraphWithDuals,_BigraphWithDuals},initial_Vertex,final_Vertex,over:{({0,0}|{0,1}|{1,1}|{1,0})...}]:=GraphPathsBetween[g,initial,final,over]=Sort[Cases[GraphPathsFrom[g,initial,over],{___,final}]]


GraphPaths[g:{_BigraphWithDuals,_BigraphWithDuals},over:{({0,0}|{0,1}|{1,1}|{1,0})...}]:=Flatten[GraphPathsFrom[g,#,over]&/@GraphVertices[g,over[[1]]],1]


GraphLoops[g:{_BigraphWithDuals,_BigraphWithDuals},over:{({0,0}|{0,1}|{1,1}|{1,0})}]:=GraphLoops[g,over]=GraphPaths[g,over]


GraphLoops[g:{_BigraphWithDuals,_BigraphWithDuals},over:{({0,0}|{0,1}|{1,1}|{1,0})...}]:=GraphLoops[g,over]=Module[{k,starts, finishes,loops,result},
k=(Length[over]+1)/2;
starts=GraphVertices[g,over[[1]]];
finishes=GraphVertices[g,over[[k]]];
loops[s_,f_]:=With[{p1=GraphPathsBetween[g,s,f,Take[over,k]],p2=GraphPathsBetween[g,f,s,Drop[over,k-1]]},
Flatten[Outer[ConcatenatePaths[#1,#2]&,p1,p2,1],1]
];
result=Most/@Flatten[Outer[loops[#1,#2]&,starts,finishes],2];
(*If[Sort[result]\[NotEqual]Sort[Cases[GraphPaths[g,over],{a_,z___,a_}\[RuleDelayed]{a,z}]],Print["bad result..."];Print[result];Print[Cases[GraphPaths[g,over],{a_,z___,a_}\[RuleDelayed]{a,z}]]];*)
result
]


ConcatenatePaths[path_]:=path
ConcatenatePaths[path1_,path2_]:=(If[path1[[-1]]!=path2[[1]],Print["ConcatenatePaths called on ",path1, " ", path2];Abort[]];path1~Join~Rest[path2])
ConcatenatePaths[path1_,path2_,others___]:=ConcatenatePaths[ConcatenatePaths[path1,path2],others]


PathLength[path_]:=(Length[path]-1)/2


ReverseLoop[loop_]:={loop[[1]]}~Join~Reverse[Rest[loop]]


SplitPathAt[path_,k_]:={Take[path,2k+1],Drop[path,2k]}


PathToLoop[path_]:=(If[path[[1]]!=path[[-1]],Print["PathToLoop called on ",path];Abort[]];Most[path])


GraphFromString[S_]/;StringMatchQ[S,"(bwd"~~__~~","~~Whitespace...~~"bwd"~~__~~")"]:=GraphFromString/@StringCases[S,"bwd"~~(DigitCharacter|"v"|"p"|"x")...~~"duals"~~(DigitCharacter|"v"|"x")...]


GraphPairToBigraphs[pair_GraphPair]:={GradedBigraph@@(Riffle[List@@pair[[2]],List@@pair[[3]]]),GradedBigraph@@Riffle[List@@pair[[5]],List@@pair[[4]]]}


BigraphsToGraphPair[Principal_GradedBigraph,DualPrincipal_GradedBigraph,PDuals_DualData,DDuals_DualData]:=GraphPair[PDuals,EvenToOddEdges@@Table[Principal[[i]],{i,1,Length[Principal],2}],OddToEvenEdges@@Table[Principal[[i]],{i,2,Length[Principal],2}],OddToEvenEdges@@Table[DualPrincipal[[i]],{i,2,Length[DualPrincipal],2}],EvenToOddEdges@@Table[DualPrincipal[[i]],{i,1,Length[DualPrincipal],2}],DDuals]


OcneanuDisplay[pair_GraphPair]:=
(Flatten[Table[If[pair[[2,i,k,j]]!=0,
Line[{{2i-2+(2j-1-Length[pair[[2,i,1]]])/Length[pair[[2,i,1]]],0},{2i-1+(2k-1-Length[pair[[2,i]]])/Length[pair[[2,i]]],1}}]],{i,1,Length[pair[[2]]]},{j,1,Length[pair[[2,i,1]]]},{k,1,Length[pair[[2,i]]]}]]/.Null->Sequence[])~Join~(Flatten[Table[If[pair[[3,i,k,j]]!=0,
Line[{{2i-1+(2j-1-Length[pair[[3,i,1]]])/Length[pair[[3,i,1]]],1},{2i+(2k-1-Length[pair[[3,i]]])/Length[pair[[3,i]]],0}}]],{i,1,Length[pair[[3]]]},{j,1,Length[pair[[3,i,1]]]},{k,1,Length[pair[[3,i]]]}]]/.Null->Sequence[])~Join~(Flatten[Table[If[pair[[4,i,k,j]]!=0,
Line[{{2i-1+(2j-1-Length[pair[[4,i,1]]])/Length[pair[[4,i,1]]],1},{2i+(2k-1-Length[pair[[4,i]]])/Length[pair[[4,i]]],2}}]],{i,1,Length[pair[[4]]]},{j,1,Length[pair[[4,i,1]]]},{k,1,Length[pair[[4,i]]]}]]/.Null->Sequence[])~Join~(Flatten[Table[If[pair[[5,i,k,j]]!=0,
Line[{{2i-2+(2j-1-Length[pair[[5,i,1]]])/Length[pair[[5,i,1]]],2},{2i-1+(2k-1-Length[pair[[5,i]]])/Length[pair[[5,i]]],1}}]],{i,1,Length[pair[[5]]]},{j,1,Length[pair[[5,i,1]]]},{k,1,Length[pair[[5,i]]]}]]/.Null->Sequence[])~Join~(Flatten[Table[If[pair[[5,i]][[All,pair[[6,i]]]][[k,j]]!=0,
Line[{{2i-2+(2j-1-Length[pair[[5,i,1]]])/Length[pair[[5,i,1]]],2},{2i-1+(2k-1-Length[pair[[5,i]]])/Length[pair[[5,i]]],3}}]],{i,1,Length[pair[[5]]]},{j,1,Length[pair[[5,i,1]]]},{k,1,Length[pair[[5,i]]]}]]/.Null->Sequence[])~Join~(Flatten[Table[If[pair[[4,i]][[pair[[6,i+1]],All]][[k,j]]!=0,
Line[{{2i-1+(2j-1-Length[pair[[4,i,1]]])/Length[pair[[4,i,1]]],3},{2i+(2k-1-Length[pair[[4,i]]])/Length[pair[[4,i]]],2}}]],{i,1,Length[pair[[4]]]},{j,1,Length[pair[[4,i,1]]]},{k,1,Length[pair[[4,i]]]}]]/.Null->Sequence[])~Join~(Flatten[Table[If[pair[[3,i]][[pair[[1,i+1]],All]][[k,j]]!=0,
Line[{{2i-1+(2j-1-Length[pair[[3,i,1]]])/Length[pair[[3,i,1]]],3},{2i+(2k-1-Length[pair[[3,i]]])/Length[pair[[3,i]]],4}}]],{i,1,Length[pair[[3]]]},{j,1,Length[pair[[3,i,1]]]},{k,1,Length[pair[[3,i]]]}]]/.Null->Sequence[])~Join~(Flatten[Table[If[pair[[2,i]][[All,pair[[1,i]]]][[k,j]]!=0,
Line[{{2i-2+(2j-1-Length[pair[[2,i,1]]])/Length[pair[[2,i,1]]],4},{2i-1+(2k-1-Length[pair[[2,i]]])/Length[pair[[2,i]]],3}}]],{i,1,Length[pair[[2]]]},{j,1,Length[pair[[2,i,1]]]},{k,1,Length[pair[[2,i]]]}]]/.Null->Sequence[])//Graphics//Show


OcneanuDisplay[gd1_BigraphWithDuals,gd2_BigraphWithDuals]:=OcneanuDisplay[BigraphsToGraphPair[gd1[[1]],gd2[[1]],gd1[[2]],gd2[[2]]]]


OcneanuDisplay[g1_GradedBigraph,g2_GradedBigraph,d1_DualData,d2_DualData]:=OcneanuDisplay[BigraphWithDuals[g1,d1],BigraphWithDuals[g2,d2]]


DualWithinDepth[d_DualData,AtDepth_?EvenQ,WithinDepth_]:=
Module[{DualDataIndex=1+AtDepth/2},
d[[DualDataIndex,WithinDepth]]]


NumericDimensionOfGenerator[{a_,b_}]:=Max[NumericDimensionOfGenerator[a],NumericDimensionOfGenerator[b]]
NumericDimensionOfGenerator[BigraphWithDuals[g_GradedBigraph,_]]:=NumericDimensionOfGenerator[g]


DimensionOfGenerator[BigraphWithDuals[g_GradedBigraph,_]]:=DimensionOfGenerator[g]
DimensionOfGenerator[{BigraphWithDuals[g_GradedBigraph,_],BigraphWithDuals[h_GradedBigraph,_]}]:=Max[{DimensionOfGenerator[g],DimensionOfGenerator[h]}]
DimensionOfGenerator[{S_String,T_String}]:=Max[{DimensionOfGenerator[S],DimensionOfGenerator[T]}]


GraphRank[BigraphWithDuals[g_GradedBigraph,_]]:=GraphRank[g]
GraphOddRank[BigraphWithDuals[g_GradedBigraph,_]]:=GraphOddRank[g]
GraphEvenRank[BigraphWithDuals[g_GradedBigraph,_]]:=GraphEvenRank[g]


GraphDepth[BigraphWithDuals[g_GradedBigraph,_DualData]]:=GraphDepth[g]


GraphAdjacencyMatrix[BigraphWithDuals[g_GradedBigraph,_DualData]]:=GraphAdjacencyMatrix[g]


RankAtDepth[BigraphWithDuals[g_GradedBigraph,_DualData],i_]:=RankAtDepth[g,i]


DepthOfBranchPoint[BigraphWithDuals[g_GradedBigraph,_DualData]]:=DepthOfBranchPoint[g]


BranchFactor[BigraphWithDuals[g_GradedBigraph,_DualData]] :=BranchFactor[g]


EvenPart[g_BigraphWithDuals]:=GraphWithDuals[EvenPart[g[[1]]],g[[2]]]


OddToEvenAdjacency[g_GradedBigraph]:=OddToEvenAdjacency[g]=BlockMatrix[
Table[
Switch[i-j,
-1,Transpose[g[[i]]],
1,g[[j]],
_,ZeroMatrix[RankAtDepth[g,i-1],RankAtDepth[g,j-1]]],
{i,1,GraphDepth[g]+1,2},{j,2,GraphDepth[g]+1,2}]]


EvenToOddAdjacency[g_GradedBigraph]:=EvenToOddAdjacency[g]=BlockMatrix[
Table[
Switch[i-j,
-1,Transpose[g[[i]]],
1,g[[j]],
_,ZeroMatrix[RankAtDepth[g,i-1],RankAtDepth[g,j-1]]],
{i,2,GraphDepth[g]+1,2},{j,1,GraphDepth[g]+1,2}]]


TwistBigraph[g_GradedBigraph,d_DualData]:=TwistBigraph[g,d]=GradedBigraph@@
Table[If[EvenQ[i],g[[i]][[d[[Ceiling[(i+1)/2]]]]],g[[i]][[All,d[[Ceiling[i/2]]]]]],{i,1,GraphDepth[g]}]


OcneanuAdjacencyMatrix[BigraphWithDuals[g1_GradedBigraph,d1_DualData],BigraphWithDuals[g2_GradedBigraph,d2_DualData]]:=With[{oe1=OddToEvenAdjacency[g1],eot2=EvenToOddAdjacency[TwistBigraph[g2,d2]],oe2=OddToEvenAdjacency[g2],oet1=OddToEvenAdjacency[TwistBigraph[g1,d1]]},
BlockMatrix[{{0,oe1,0,oet1},{Transpose[oe1],0,eot2,0},{0,Transpose[eot2],0,oe2},{Transpose[oet1],0,Transpose[oe2],0}}]
]


FlatDualData[d_DualData]:=Flatten[Most[FoldList[Plus,0,Length/@(List@@d)]]+(List@@d)]


OcneanuStrutsAdjacencyMatrix[BigraphWithDuals[g1_GradedBigraph,d1_DualData],BigraphWithDuals[g2_GradedBigraph,d2_DualData]]:=With[{oe1=OddToEvenAdjacency[g1],eot2=EvenToOddAdjacency[TwistBigraph[g2,d2]],oe2=OddToEvenAdjacency[g2],oet1=OddToEvenAdjacency[TwistBigraph[g1,d1]]},
BlockMatrix[{{0,oe1,0,oet1},{Transpose[oe1],0,eot2,IdentityMatrix[GraphOddRank[g1]]},{0,Transpose[eot2],0,oe2},{Transpose[oet1],IdentityMatrix[GraphOddRank[g1]],Transpose[oe2],0}}]
]


OcneanuStrutsAdjacencyMatrix[BigraphWithDuals[g1_GradedBigraph,d1_DualData],BigraphWithDuals[g2_GradedBigraph,d2_DualData]]:=With[{oe1=OddToEvenAdjacency[g1],eot2=EvenToOddAdjacency[TwistBigraph[g2,d2]],oe2=OddToEvenAdjacency[g2],oet1=OddToEvenAdjacency[TwistBigraph[g1,d1]]},
BlockMatrix[{{IdentityMatrix[GraphEvenRank[g1]][[FlatDualData[d1]]],oe1,0,oet1},{Transpose[oe1],0,eot2,IdentityMatrix[GraphOddRank[g1]]},{0,Transpose[eot2],IdentityMatrix[GraphEvenRank[g2]][[FlatDualData[d2]]],oe2},{Transpose[oet1],IdentityMatrix[GraphOddRank[g1]],Transpose[oe2],0}}]
]


TripartiteAdjacencyMatrix[BigraphWithDuals[g1_GradedBigraph,d1_DualData],BigraphWithDuals[g2_GradedBigraph,d2_DualData]]:=With[{oe1=OddToEvenAdjacency[g1],eot2=EvenToOddAdjacency[TwistBigraph[g2,d2]],oe2=OddToEvenAdjacency[g2],oet1=OddToEvenAdjacency[TwistBigraph[g1,d1]]},
BlockMatrix[{{0,oe1+oet1,0},{Transpose[oe1+oet1],0,eot2+Transpose[oe2]},{0,Transpose[eot2]+oe2,0}}]
]


OcneanuGraph[BigraphWithDuals[g1_GradedBigraph,d1_DualData],BigraphWithDuals[g2_GradedBigraph,d2_DualData]]:=OcneanuGraph[BigraphWithDuals[g1,d1],BigraphWithDuals[g2,d2]]=FromAdjacencyMatrix[OcneanuAdjacencyMatrix[BigraphWithDuals[g1,d1],BigraphWithDuals[g2,d2]]]


OcneanuStrutsGraph[BigraphWithDuals[g1_GradedBigraph,d1_DualData],BigraphWithDuals[g2_GradedBigraph,d2_DualData]]:=OcneanuStrutsGraph[BigraphWithDuals[g1,d1],BigraphWithDuals[g2,d2]]=FromAdjacencyMatrix[OcneanuStrutsAdjacencyMatrix[BigraphWithDuals[g1,d1],BigraphWithDuals[g2,d2]]]


TripartiteGraph[BigraphWithDuals[g1_GradedBigraph,d1_DualData],BigraphWithDuals[g2_GradedBigraph,d2_DualData]]:=TripartiteGraph[BigraphWithDuals[g1,d1],BigraphWithDuals[g2,d2]]=FromAdjacencyMatrix[TripartiteAdjacencyMatrix[BigraphWithDuals[g1,d1],BigraphWithDuals[g2,d2]]]


GraphPairsIsomorphicQ[{g1_BigraphWithDuals,g2_BigraphWithDuals},{g3_BigraphWithDuals,g4_BigraphWithDuals}]:=
GraphPairsIsomorphicQInternal[{g1,g2},{g3,g4}]\[Or]GraphPairsIsomorphicQInternal[{g1,g2},{g4,g3}]


GraphPairsIsomorphicQInternal[{BigraphWithDuals[g1_GradedBigraph,d1_DualData],BigraphWithDuals[g2_GradedBigraph,d2_DualData]},{BigraphWithDuals[g3_GradedBigraph,d3_DualData],BigraphWithDuals[g4_GradedBigraph,d4_DualData]}]:=
Module[{label,k},
label[_,1]="NN*";
label[_,1+GraphRank[g1]]="MM*";
Table[label[_,k]="NN",{k,2,GraphEvenRank[g1]}];
Table[label[_,k]="NM",{k,1+GraphEvenRank[g1],GraphRank[g1]}];
Table[label[_,k]="MM",{k,2+GraphRank[g1],GraphRank[g1]+GraphEvenRank[g2]}];
Table[label[_,k]="MN",{k,1+GraphRank[g1]+GraphEvenRank[g2],GraphRank[g1]+GraphRank[g2]}];
label[_,k_]:=(GraphPairsIsomorphicQProblem={{BigraphWithDuals[g1,d1],BigraphWithDuals[g2,d2]},{BigraphWithDuals[g3,d3],BigraphWithDuals[g4,d4]}};DebugPrint["... trouble labelling vertices in GraphPairsIsomorphicQ! ",k];DebugPrint[Stack[_]];Abort[]);

IsomorphicQ[OcneanuStrutsGraph[BigraphWithDuals[g1,d1],BigraphWithDuals[g2,d2]],OcneanuStrutsGraph[BigraphWithDuals[g3,d3],BigraphWithDuals[g4,d4]],Invariants->{label,DegreesOf2Neighborhood,NumberOf2Paths,Distances}]
]


DeleteDefiniteDownValues[f_Symbol]:=
(DownValues[f]=DeleteCases[DownValues[f],(x_:>y_)/;FreeQ[x,Blank|BlankSequence|BlankNullSequence|Repeated|RepeatedNull|Alternatives|Except]];)


ClearGraphPairsCachedValues[]:=
(DeleteDefiniteDownValues[EvenToOddAdjacency];DeleteDefiniteDownValues[OddToEvenAdjacency];DeleteDefiniteDownValues[TwistBigraph];DeleteDefiniteDownValues[OcneanuGraph];DeleteDefiniteDownValues[OcneanuStrutsGraph];DeleteDefiniteDownValues[TripartiteGraph];)


FullOcneanuTest[g1_GradedBigraph,g2_GradedBigraph,d1_DualData,d2_DualData]:=
Module[{},
If[g1[[-1]]==={}\[And]g2[[-1]]==={},False,
If[g1[[-1]]==={},FullOcneanuTest[Most[g1],g2,Most[d1],d2],
If[g2[[-1]]==={},FullOcneanuTest[g1,Most[g2],d1,Most[d2]],
With[{oe2=OddToEvenAdjacency[g2],eo1=EvenToOddAdjacency[g1],eot2=EvenToOddAdjacency[TwistBigraph[g2,d2]],oe1=OddToEvenAdjacency[TwistBigraph[g1,d1]]},(oe2.eo1==Transpose[oe1.eot2])\[And](eot2.oe2==Transpose[eo1.oe1])
]
]
]
]
]


FullOcneanuTest[dg1_BigraphWithDuals,dg2_BigraphWithDuals]:=FullOcneanuTest[dg1[[1]],dg2[[1]],dg1[[2]],dg2[[2]]]
FullOcneanuTest[S1_String,S2_String]:=FullOcneanuTest[GraphFromString[S1],GraphFromString[S2]]
FullOcneanuTest[{A_,B_}]:=FullOcneanuTest[A,B]


OldSlowPartialOcneanuTest[g1_GradedBigraph,g2_GradedBigraph,d1_DualData,d2_DualData]/;GraphDepth[g1]==GraphDepth[g2]:=
With[{oe2=OddToEvenAdjacency[g2],eo1=EvenToOddAdjacency[g1],oet1=OddToEvenAdjacency[TwistBigraph[g1,d1]],eot2=EvenToOddAdjacency[TwistBigraph[g2,d2]]},
If[EvenQ[GraphDepth[g1]],
((oe2.eo1)[[1;;-1-RankAtDepth[g1,GraphDepth[g1]],1;;-1-RankAtDepth[g1,GraphDepth[g1]]]]==(Transpose[oet1.eot2])[[1;;-1-RankAtDepth[g1,GraphDepth[g1]],1;;-1-RankAtDepth[g1,GraphDepth[g1]]]])\[And](eot2.oe2==Transpose[eo1.oet1]),
(oe2.eo1==Transpose[oet1.eot2])\[And]((eot2.oe2)[[1;;-1-RankAtDepth[g1,GraphDepth[g1]],1;;-1-RankAtDepth[g1,GraphDepth[g1]]]]==(Transpose[eo1.oet1])[[1;;-1-RankAtDepth[g1,GraphDepth[g1]],1;;-1-RankAtDepth[g1,GraphDepth[g1]]]])]
]


ZeroOutBottomRightCorner[matrix0_,n_]:=Module[{matrix=matrix0},
matrix[[-n;;-1,-n;;-1]]=Table[0,{n},{n}];
matrix
]


ZeroOutBottomRightCorner[matrix0_,n_,m_]:=Module[{matrix=matrix0},
matrix[[-n;;-1,-m;;-1]]=Table[0,{n},{m}];
matrix
]


SlowPartialOcneanuTest[g1_GradedBigraph,g2_GradedBigraph,d1_DualData,d2_DualData]/;GraphDepth[g1]==GraphDepth[g2]:=
With[{oe2=OddToEvenAdjacency[g2],eo1=EvenToOddAdjacency[g1],oet1=OddToEvenAdjacency[TwistBigraph[g1,d1]],eot2=EvenToOddAdjacency[TwistBigraph[g2,d2]]},
If[EvenQ[GraphDepth[g1]],
(ZeroOutBottomRightCorner[Transpose[eot2].eo1,RankAtDepth[g2,GraphDepth[g2]],RankAtDepth[g1,GraphDepth[g1]]]==ZeroOutBottomRightCorner[oe2.Transpose[oet1],RankAtDepth[g2,GraphDepth[g2]],RankAtDepth[g1,GraphDepth[g1]]])\[And](eot2.oe2==Transpose[eo1.oet1]),
(Transpose[eot2].eo1==oe2.Transpose[oet1])\[And](ZeroOutBottomRightCorner[eot2.oe2,RankAtDepth[g1,GraphDepth[g1]]]==ZeroOutBottomRightCorner[Transpose[eo1.oet1],RankAtDepth[g1,GraphDepth[g1]]])]
]


FastPartialOcneanuTest[g1_GradedBigraph,g2_GradedBigraph,d1_DualData,d2_DualData]/;GraphDepth[g1]==GraphDepth[g2]\[And]OddQ[GraphDepth[g1]]:=
Transpose[g2[[-1,All,d2[[-1]]]]].g1[[-1]]+g2[[-2,d2[[-1]]]].Transpose[g1[[-2]]]==Transpose[g2[[-1]]].g1[[-1,All,d1[[-1]]]]+g2[[-2]].Transpose[g1[[-2,d1[[-1]]]]]\[And]g1[[-1,All,d1[[-1]]]].g1[[-2]]==g2[[-1]].g2[[-2,d2[[-1]]]]


FastPartialOcneanuTest[g1_GradedBigraph,g2_GradedBigraph,d1_DualData,d2_DualData]/;GraphDepth[g1]==GraphDepth[g2]\[And]EvenQ[GraphDepth[g1]]:=
Transpose[g1[[-1]]].g1[[-1,d1[[-1]]]]+g1[[-2]].Transpose[g1[[-2,All,d1[[-2]]]]]==Transpose[g2[[-1,d2[[-1]]]]].g2[[-1]]+g2[[-2,All,d2[[-2]]]].Transpose[g2[[-2]]]\[And]g2[[-1,d2[[-1]]]].g1[[-2]]==g2[[-1]].g1[[-2,All,d1[[-2]]]]\[And]g1[[-1]].g2[[-2,All,d2[[-2]]]]==g1[[-1,d1[[-1]]]].g2[[-2]]


Global`FastPartialOcneanuTestTiming=0;
Global`SlowPartialOcneanuTestTiming=0;


SafePartialOcneanuTest[g1_GradedBigraph,g2_GradedBigraph,d1_DualData,d2_DualData]:=
Module[{fast,fastTime,slow,slowTime},
{fastTime,fast}=AbsoluteTiming[FastPartialOcneanuTest[g1,g2,d1,d2]];
{slowTime,slow}=AbsoluteTiming[SlowPartialOcneanuTest[g1,g2,d1,d2]];
Global`FastPartialOcneanuTestTiming+=fastTime;
Global`SlowPartialOcneanuTestTiming+=slowTime;
If[slow=!=fast,
DebugPrint["FastPartialOcneanuTest gave the wrong result: "];
DebugPrint[g1];
DebugPrint[g2];
DebugPrint[d1];
DebugPrint[d2];
];
slow
]


PartialOcneanuTest[dg1_BigraphWithDuals,dg2_BigraphWithDuals]:=FastPartialOcneanuTest[dg1[[1]],dg2[[1]],dg1[[2]],dg2[[2]]]


ReplaceEntry[list_,i_][j_]:=list[[1;;i-1]]~Join~{j}~Join~list[[i+1;;]]


PreDualDataList[1]:={{1}}


PreDualDataList[n_Integer]:=PreDualDataList[n]=
Union[(Append[#,n]&/@PreDualDataList[n-1])~Join~Flatten[Table[ReplaceEntry[ReplaceEntry[PreDualDataList[n-1][[j]],PreDualDataList[n-1][[j]][[i]]][PreDualDataList[n-1][[j]][[i]]],i][n]~Join~{i}
,{i,1,n-1},{j,1,Length[PreDualDataList[n-1]]}],1]]


DualDataList[n_]:=DualDataList[n]=DualData/@PreDualDataList[n]


CompatibleDualDataList[GradedBigraph[]]:={DualData[{1}]}


CompatibleDualDataList[g_GradedBigraph]/;OddQ[GraphDepth[g]]:=CompatibleDualDataList[Most[g]]


CompatibleDualDataList[g_GradedBigraph]/;EvenQ[GraphDepth[g]]:=
Flatten[Outer[Join,CompatibleDualDataList[Most[g]],DualDataList[Length[Last[g]]]],1]


FullOcneanuTest[g1_GradedBigraph,g2_GradedBigraph]:=FullOcneanuTest[g1,g2]=
Or@@Flatten[Table[FullOcneanuTest[g1,g2,CompatibleDualDataList[g1][[i]],CompatibleDualDataList[g2][[j]]],{i,1,Length[CompatibleDualDataList[g1]]},{j,1,Length[CompatibleDualDataList[g2]]}]]


CheckDualDimensions[gd_BigraphWithDuals]:=DimensionsByDepth[gd[[1]]]==DimensionsByDepth[TwistBigraph[gd[[1]],gd[[2]]]]


stringInterleave[{},_String]:=""
stringInterleave[list:{__String},t_String]:=StringJoin@@(Most[Flatten[Transpose[{list,Table[t,{Length[list]}]}]]])


GraphToString[BigraphWithDuals[g_GradedBigraph,d_DualData]]:="bwd"<>StringDrop[GraphToString[g],3]<>"duals"<>stringInterleave[vectorToString/@(List@@d),"v"]


matrixToString[m_?MatrixQ]:=stringInterleave[vectorToString/@m,"p"]
vectorToString[v_?VectorQ]:=stringInterleave[ToString/@v,"x"]


GraphToString[g_GraphWithDuals]:=StringDrop["fg"<>stringInterleave[Flatten[Transpose[{vectorToString/@(List@@g[[2]]),matrixToString/@g[[1,1]],(matrixToString/@g[[1,2]])~Join~{""}}]],"v"],-1]


interpretNumber[S_String]/;StringMatchQ[S,NumberString]:=ToExpression[S]
interpretNumber[""]:=Sequence[];


stringSplit=FusionAtlas`Bigraphs`Private`stringSplit;


GraphFromString[S_String]/;StringTake[S,3]=="bwd":=
Module[{g,d},
Check[
{g,d}=stringSplit[S,"duals"];
BigraphWithDuals[GraphFromString["gbg"<>StringDrop[g,3]],
DualData@@((interpretNumber/@stringSplit[#,"x"]&)/@stringSplit[d,"v"])],
Print["Error while parsing string: ", S];Abort[]]
]



Unprotect[Translate];
Translate[BigraphWithDuals[g_GradedBigraph,d_DualData],depth_Integer/;EvenQ[depth]]:=BigraphWithDuals[Translate[g,depth],(DualData@@Table[{1},{depth/2}])~Join~d]
Protect[Translate];

Truncate[d_DualData,depth_Integer]:=Take[d,Min[Length[d],Ceiling[(depth+1)/2]]]
Truncate[BigraphWithDuals[g_GradedBigraph,d_DualData],depth_Integer/;depth>=1]:=BigraphWithDuals[Truncate[g,depth],Truncate[d,depth]]
Truncate[BigraphWithDuals[g_GradedBigraph,d_DualData],depth_Integer/;depth<=0]:=BigraphWithDuals[Truncate[g,depth],Truncate[d,GraphDepth[g]+depth]]
Truncate[L_List,depth_/;depth>0]:=Truncate[#,depth]&/@L
Truncate[L_List,depth_/;depth<=0]:=Truncate[#,Max@@(GraphDepth/@L)+depth]&/@L
Truncate[S_String,depth_]:=GraphToString[Truncate[GraphFromString[S],depth]]


PermuteToReduceCrossings[g_,deep_:True]:=PermuteToReduceCrossings[g,deep]=FromScalaObject[oldAsScalaObject[g]@permuteToReduceCrossings[deep]]
PermuteToReduceCrossings[g:{_String,_String}]:=PermuteToReduceCrossings[GraphFromString/@g]


TruncatesToOneOfQ[graph_, graphs_]:=Module[{shortEnoughGraphs},
shortEnoughGraphs=(Cases[graphs,g_/;GraphDepth[g[[1]]]<=GraphDepth[graph[[1]]]]);
If[Length[shortEnoughGraphs]>0,
Or@@(Length[RemoveDuplicates[{Truncate[graph,GraphDepth[#[[1]]]],#}]]==1&/@shortEnoughGraphs),
False
]
]


RemoveDuplicates[Gs:{{_BigraphWithDuals,_BigraphWithDuals}...}]:=FromScalaObject[org`fusionatlas`graphs`PairOfBigraphsWithDuals$`MODULE$@removeDuplicates[AsScalaList[AsScalaObject/@Gs]]]
RemoveDuplicates[Gs:{{_String,_String}...}]:=Map[GraphToString,RemoveDuplicates[Map[GraphFromString,Gs,{2}]],{2}]


oldAsScalaObject[{g1_BigraphWithDuals,g2_BigraphWithDuals}]:=org`fusionatlas`graphs`PairOfBigraphsWithDuals$`MODULE$@apply[GraphToString[g1],GraphToString[g2]]


ScalaTriplePointObstruction[G_]:=ScalaTriplePointObstruction[G]=Module[{gs,result},
While[!FreeQ[gs=oldAsScalaObject[G],$Failed],
Print["AsScalaObject[",G,"] failed!"];
RestartJava[];
];
result=org`fusionatlas`graphs`obstructions`TriplePointObstruction$`MODULE$@apply[gs]@isEmpty[];
If[result,True,False,Print["ScalaTriplePointObstruction did not return true or false!: ", G," ",gs," ",result];Abort[]]
]


StabilitySequence[{g1_BigraphWithDuals,g2_BigraphWithDuals}]:=Module[{result},
result=Table[Length[Complement[Union[Plus@@#&/@(g1[[1,k]]~Join~Transpose[g1[[1,k]]]~Join~g2[[1,k]]~Join~Transpose[g2[[1,k]]])],{0,1}]]==0,{k,DepthOfBranchPoint[g1]+1,Min[GraphDepth[g1],GraphDepth[g2]]}];
If[!MatchQ[result,{(True|False)...}],Print["Something went wrong while computing StabilitySequence[",{g1,g2},"]"];Abort[]];
result
]


CylinderQ[{g1_BigraphWithDuals,g2_BigraphWithDuals}]:=CylinderQ[{g1,g2}]=If[
DepthOfBranchPoint[g1]===None\[Or]DepthOfBranchPoint[g2]===None\[Or]RankAtDepth[g1,GraphDepth[g1]]==0\[Or]RankAtDepth[g2,GraphDepth[g2]]==0,False,StabilitySequence[{g1,g2}][[-1]]]
CylinderQ[{S1_String,S2_String}]:=CylinderQ[GraphFromString/@{S1,S2}]


CylinderObstruction[{g1_BigraphWithDuals,g2_BigraphWithDuals}]:=CylinderObstruction[{g1,g2}]=Module[{},
If[
DepthOfBranchPoint[g1]===None,True,
!MemberQ[Partition[StabilitySequence[{g1,g2}],2,1],{True,False}]
]
]


HaagerupWithDuals=BigraphWithDuals[HaagerupBigraph,DualData[{1},{1},{1,2},{2,1}]]


DualHaagerupWithDuals=BigraphWithDuals[DualHaagerupBigraph,DualData[{1},{1},{1,2}]]


HaagerupAsaedaWithDuals=BigraphWithDuals[HaagerupAsaedaBigraph,DualData[{1},{1},{1},{1,2},{2,1,3},{1}]]


DualHaagerupAsaedaWithDuals=BigraphWithDuals[DualHaagerupAsaedaBigraph,DualData[{1},{1},{1},{1,2},{1}]]


End[];


EndPackage[];
