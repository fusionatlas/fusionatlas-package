(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["FusionAtlas`AfzalyEnumerator`",{"FusionAtlas`","FusionAtlas`Bigraphs`","FusionAtlas`GraphPairs`"}];


FilteredEnumerate::usage="";
FilteredEnumerateToRank::usage="";
FilteredEnumerateToDepth::usage="";
IgnoredWeeds::usage="";


Begin["`Private`"];


afzalyPath=AbsoluteFileName[FileNameJoin[{FusionAtlasDirectory[],"..","development","afzaly"}]];


k0=0;
k:=ToString[$KernelID]<>"_"<>ToString[k0++]


afzalyEnumeratorResumes=True;
afzalyEnumeratorTimeLimit=3600;
afzalyEnumeratorCaches=True;


If[afzalyEnumeratorCaches,
Needs["FusionAtlas`Java`"];
S3Class:=JLink`LoadJavaClass["net.tqft.toolkit.amazon.S3$","AllowShortContext"->False];
S3:=net`tqft`toolkit`amazon`S3$`MODULE$;
bucket:=(S3Class;S3@apply["afzaly-enumerator"])
]


amazonGet[s_String]:=bucket@get[MakeJavaObject[s]]@get[]
amazonPut[s_String,v_String]:=bucket@put[MakeJavaObject[s],MakeJavaObject[v]]
amazonContains[s_String]:=bucket@contains[MakeJavaObject[s]]


Clear[FastEnumerate]
FastEnumerate[weed:{_BigraphWithDuals,_BigraphWithDuals},index_?NumericQ,options_String:"",ignoring_List:{}]:=Module[{basecmd,hash,cmd,read,result,output,text,resumed=False,paused=False,K},
K=k;
SetDirectory[afzalyPath];
basecmd="./enumerate-pgps --maxindex "<>ToString[N[index]]<>" "<>GraphToString[weed[[1]]]<>","<>GraphToString[weed[[2]]]<>" "<>options;
Print[basecmd];
If[afzalyEnumeratorCaches\[And]amazonContains[basecmd],
text=amazonGet[basecmd],
hash=IntegerString[Hash[basecmd,"SHA"],16];
If[afzalyEnumeratorResumes\[And]FileExistsQ["runs-"<>hash],
If[FileExistsQ["runs-next"],DeleteFile["runs-next"]];
resumed=True;
RenameFile["runs-"<>hash,"runs-next"];
basecmd="./enumerate-pgps --resume runs-next"
];
cmd=basecmd <>" --printALL out"<>K<>If[afzalyEnumeratorResumes," --maxtime "<>ToString[afzalyEnumeratorTimeLimit]<>" runs-"<>hash,""]<>" &> err"<>K;
Print[cmd];
Run[cmd];
If[FileExistsQ["runs-next"],DeleteFile["runs-next"]];
output=Import["err"<>K,"Text"];
If[StringFreeQ[output,"time taken= "],
If[StringFreeQ[output,"Resume"],
Print[output];
DeleteFile["out"<>K];
DeleteFile["err"<>K];
ResetDirectory[];
Return[$Failed];,
(* there's a resume file *)
Print["exceeded time limit; this graph has been paused"];
 paused=True;
];
];
If[!paused\[And]FileExistsQ["runs-"<>hash],DeleteFile["runs-"<>hash]];
text=Import["out"<>K,"Text"];
If[afzalyEnumeratorCaches\[And]!paused\[And]!resumed,
amazonPut[basecmd,text];
],
Print["Law of the excluded middle."];Abort[]
];
If[!StringQ[text],Print["No output from ",basecmd];Print[text];Abort[]];
read=StringSplit[#,","]&/@StringSplit[text,"\n"];
result=Map[GraphFromString[StringTrim[#]]&,read,{2}];
If[FileExistsQ["out"<>K],DeleteFile["out"<>K]];
If[FileExistsQ["err"<>K],DeleteFile["err"<>K]];
ResetDirectory[];
result=DeleteCases[result,Alternatives@@ignoring];
{
Cases[result,c_/;FullOcneanuTest@@c],
result,
paused
}
]


EnumerateToRank[weed:{_BigraphWithDuals,_BigraphWithDuals},index_?NumericQ,maxrank_Integer,ignoring_List:{}]:=Module[{result,vines,weeds,paused},
result=FastEnumerate[weed,index," --maxrank "<>ToString[maxrank],ignoring];
If[result===$Failed,Return[$Failed]];
{vines,weeds,paused}=result;
{vines,Union[Cases[weeds,c_/;maxrank-GraphRank[c]<=1],If[paused,{weed},{}]]}
]


EnumerateToDepth[weed:{_BigraphWithDuals,_BigraphWithDuals},index_?NumericQ,maxdepth_Integer,ignoring_List:{}]:=Module[{result,vines,weeds,paused},
result=FastEnumerate[weed,index," --maxdepth "<>ToString[maxdepth],ignoring];
If[result===$Failed,Return[$Failed]];
{vines,weeds,paused}=result;
{vines,Union[Cases[weeds,c_/;GraphDepth[c[[1]]]==GraphDepth[c[[2]]]==maxdepth],If[paused,{weed},{}]]}
]


Clear[IgnoredWeeds]
IgnoredWeeds[weed_,index_]:={}


FilteredEnumerate[weed:{_BigraphWithDuals,_BigraphWithDuals},index_?NumericQ,options_String:"",ignoring_List:{}]:=Module[{result,vines,weeds,paused,obstructed,shorten},
result=FastEnumerate[weed,index,options,ignoring~Join~IgnoredWeeds[weed,index]];
If[result===$Failed,Return[$Failed]];
{vines,weeds,paused}=result;
obstructed=Cases[weeds,g_/;!ScalaTriplePointObstruction[g]||!CylinderObstruction[g]];
If[Length[obstructed]>0,
shorten[X_]:=DeleteCases[X,x_/;MemberQ[X,Truncate[x,-1]]];
obstructed=FixedPoint[shorten, obstructed];
IgnoredWeeds[weed,index]=Union[IgnoredWeeds[weed,index]~Join~obstructed]
];
{Complement[vines,obstructed],Complement[weeds,obstructed],paused}
]


FilteredEnumerateToRank[weed:{_BigraphWithDuals,_BigraphWithDuals},index_?NumericQ,maxrank_Integer,ignoring_List:{}]:=Module[{result,vines,weeds,paused},
result=FilteredEnumerate[weed,index," --maxrank "<>ToString[maxrank],ignoring];
If[result===$Failed,Return[$Failed]];
{vines,weeds,paused}=result;
{vines,Union[Cases[weeds,c_/;maxrank-GraphRank[c]<=1],If[paused,{weed},{}]]}
]


FilteredEnumerateToDepth[weed:{_BigraphWithDuals,_BigraphWithDuals},index_?NumericQ,maxdepth_Integer,ignoring_List:{}]:=Module[{result,vines,weeds,paused},
result=FilteredEnumerate[weed,index," --maxdepth "<>ToString[maxdepth],ignoring];
If[result===$Failed,Return[$Failed]];
{vines,weeds,paused}=result;
{vines,Union[Cases[weeds,c_/;GraphDepth[c[[1]]]==GraphDepth[c[[2]]]==maxdepth],If[paused,{weed},{}]]}
]


End[];


EndPackage[];
