(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["FusionAtlas`FormalCodegrees`",{"FusionAtlas`","FusionAtlas`Bigraphs`","FusionAtlas`GraphPairs`","FusionAtlas`TensorSolver`","FusionAtlas`Utilities`IntersectSubspaces`"}];


FormalCodegreesInDimensionFieldTest::usage="";
FPDimensions;


FormalCodegrees::usage="";
FindDimensionFunctions::usage="";
FormalCodegreesInequalityTest::usage="";


Begin["`Private`"];


Eigenspaces[m_]:=With[{e=RootReduce[Eigensystem[m]]},
{#,Cases[Transpose[e],{#,v_}:>v]}&/@Union[e[[1]]]
]


proportionalQ[v_,w_]:=RootReduce[(v.w)^2-(v.v)(w.w)]==0


Clear[FindDimensionFunctions]
FindDimensionFunctions[FusionRules[g_,{{0,0,0}->multiplicities_}]]:=FindDimensionFunctions[FusionRules[g,{{0,0,0}->multiplicities}]]=
Module[{simultaneousEigenspaces,n,eigenspaces,candidates,verify,obj},
n=Length[multiplicities];
obj[i_]:=obj[i]=multiplicities[[All,i]];
simultaneousEigenspaces={{{},IdentityMatrix[n]}};
Function[{i},
DebugPrint["Finding eigenspaces for object ",i];
eigenspaces=Eigenspaces[obj[i]];
simultaneousEigenspaces=Union[DeleteCases[Flatten[Outer[Function[{se,e},{se[[1]]~Join~{e[[1]]},IntersectSubspaces[n,{se[[2]],e[[2]]}]}],simultaneousEigenspaces,eigenspaces,1],1],{_,{}}]];
]/@Range[1,n];
candidates=First/@simultaneousEigenspaces;
verify[x_]:=And@@Table[proportionalQ[obj[i].x,x],{i,1,n}];
Select[candidates,verify]
]


FindDimensionFunctions[g_GradedGraph]:=FindDimensionFunctions/@FindFusionRules[g]


FormalCodegree[v_?VectorQ]:=RootReduce[v.Conjugate[v]]


Clear[FormalCodegrees]


FormalCodegrees[f_FusionRules]:=FormalCodegree/@FindDimensionFunctions[f]


FormalCodegrees[g_GradedGraph]:=FormalCodegrees/@FindFusionRules[g]


FormalCodegrees[g0_BigraphWithDuals,g1_BigraphWithDuals]/;MatchQ[FindFusionRules[g0,g1],_List]:=FormalCodegrees[g0,g1]={FormalCodegrees[EvenPartFusionRules[#]],FormalCodegrees[EvenPartFusionRules[FlipFusionRules[#]]]}&/@FindFusionRules[g0,g1]


DimensionFieldGenerator[g_GradedGraph]:=Module[{\[Theta],dimensions},
\[Theta]=ToNumberField[DimensionOfGenerator[g]];
dimensions=Flatten[ReducedDimensionsByDepth[g]];
ToNumberField[{\[Theta]}~Join~Cases[dimensions,d_/;MatchQ[ToNumberField[d,\[Theta]],_ToNumberField]]][[1]]/.AlgebraicNumber[r_,_]:>r
]


DimensionFieldGenerator[g0_BigraphWithDuals,g1_BigraphWithDuals]:=Module[{\[Theta],dimensions},
\[Theta]=ToNumberField[ReducedDimensionsByDepth[g0[[1]]][[3]]][[1]];
dimensions=Flatten[ReducedDimensionsByDepth[g0[[1]]][[1;;;;2]]];
ToNumberField[{\[Theta]}~Join~Cases[dimensions,d_/;MatchQ[ToNumberField[d,\[Theta]],_ToNumberField]]][[1]]/.AlgebraicNumber[r_,_]:>r
]
DimensionFieldGenerator[fr_FusionRules]:=DimensionFieldGenerator[fr]=(DeleteCases[ToNumberField[FPDimensions[fr]],_Integer]/.AlgebraicNumber[r_,_]:>r/.{}->{1})[[1]]


NumbersInFieldQ[numbers_,generator_]:=Module[{},
Quiet[
Not[MatchQ[ToNumberField[RootReduce[#],generator],_ToNumberField]&/@(Or@@(numbers~Join~{1}))],
{ToNumberField::nnfel}
]
]
NumbersInFieldQ[numbers_,1]:=
Length[DeleteCases[RootReduce[numbers],_Integer|_Rational]]==0


Clear[FormalCodegreesInDimensionFieldTest]
FormalCodegreesInDimensionFieldTest[g0_BigraphWithDuals,g1_BigraphWithDuals]/;MatchQ[FindFusionRules[g0,g1],_List]:=FormalCodegreesInDimensionFieldTest[g0,g1]=Module[{fg0,fg1,formalCodegrees},
fg0=DimensionFieldGenerator[g0,g1];
fg1=DimensionFieldGenerator[g1,g0];
formalCodegrees=FormalCodegrees[g0,g1];
Length[Cases[formalCodegrees,{nnfc_,mmfc_}/;NumbersInFieldQ[nnfc,fg0]\[And]NumbersInFieldQ[mmfc,fg1]]]>0
]


FPDimensions[fr_FusionRules]:=FPDimensions[fr]=Max[Cases[Eigenvalues[#],x_/;Im[x]==0]]&/@fr[[2,1,2]]
GlobalDimension[fr_FusionRules]:=GlobalDimension[fr]=ToNumberField[Norm[FPDimensions[fr]]^2,DimensionFieldGenerator[fr]]


Clear[FormalCodegreesInDimensionFieldTest]
FormalCodegreesInDimensionFieldTest[fr_FusionRules]:=FormalCodegreesInDimensionFieldTest[fr]=Module[{field,formalCodegrees},
field=DimensionFieldGenerator[fr];
formalCodegrees=FormalCodegrees[fr];
NumbersInFieldQ[formalCodegrees,field]
]


(* From http://arxiv.org/abs/1309.4822 *)
Clear[FormalCodegreesInequalityTest]
FormalCodegreesInequalityTest[f:FusionRules[_,___]]:=FormalCodegreesInequalityTest[f]=Module[{},
(Plus@@(#^-2&/@DeleteCases[FormalCodegrees[f],0]))<=1/2 (1+GlobalDimension[f]^-1)
]


FormalCodegreesInequalityTest[f:FusionRules[{_BigraphWithDuals,_BigraphWithDuals},___]]:=FormalCodegreesInequalityTest[f]=Module[{},
FormalCodegreesInequalityTest[EvenPartFusionRules[f]]\[And]FormalCodegreesInequalityTest[EvenPartFusionRules[FlipFusionRules[f]]]
]


FormalCodegreesInequalityTest[g0_BigraphWithDuals,g1_BigraphWithDuals]/;MatchQ[FindFusionRules[g0,g1],_List]:=Or@@(FormalCodegreesInequalityTest/@FindFusionRules[g0,g1])


End[];


EndPackage[];
