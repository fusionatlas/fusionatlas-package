(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["FusionAtlas`Iterators`",{"FusionAtlas`"}];


Iterator::usage="Iterator provides a lazily evaluated iterator (as in Java). Normal[iterator] will convert to a List. Many Mathematica functions (Map, Cases, Select, Join, FoldList, and others) have been adapted to work with Iterator.";


Begin["`Private`"];


Iterator/:Take[Iterator[f_],1]:=f[]
Iterator/:First[Iterator[f_]]:=f[]


Iterator/:Normal[i_Iterator]:=Module[{n},
Reap[While[n=Take[i,1];Length[n]>0,Sow[n]]][[2,1,All,1]]
]


Iterator/:Take[i_Iterator,n_Integer/;n>=0]:=Module[{k=n},Iterator[If[k-->0,Take[i,1],{}]&]]
Iterator/:Drop[i_Iterator,n_Integer/;n>=0]:=(Do[Take[i,1],{n}];i)


Iterator/:Rest[i_Iterator]:=(Take[i,1];i)


Iterator/:Map[f_,i_Iterator]:=Iterator[(f/@Take[i,1])&]


Unprotect[Transpose];
Transpose[is:{___Iterator}]:=Iterator[Module[{next=(Take[#,1]&/@is)},If[Min@@(Length/@next)==0,{},Transpose[next]]]&]
Protect[Transpose];


Iterator/:Flatten[i_Iterator,depth_:\[Infinity]]:=Module[{next,stack={},done=False,result},
Iterator[(While[!done\[And]Length[stack]==0,
next=Take[i,1];
If[Length[next]==0,
done=True,
stack=First[next];
If[depth>1,stack=Flatten[stack,depth-1]];
]
];
If[done,
{},
result=First[stack];
stack=Rest[stack];
{result}
])&]
]


Iterator/:Select[i_Iterator,f_]:=Flatten[Select[{#},f]&/@i,1]
Iterator/:Cases[i_Iterator,p_]:=Flatten[Cases[{#},p]&/@i,1]


Iterator/:FoldList[f_,x_,i_Iterator]:=Module[{v=x},
{x}~Join~Iterator[(v=f[v,Take[i,1]])&]
]


Iterator[x_List]:=Module[{l=x,r},Iterator[If[Length[l]>0,r=First[l];l=Rest[l];{r},{}]&]]


Iterator[i_Iterator]:=i


Iterator/:Join[is___Iterator,x_List,js___Iterator]:=Join[is,Iterator[x],js]
Iterator/:Join[is__Iterator]:=Module[{js={is},next},
Iterator[
If[Length[js]==0,
{},
While[Length[js]>0\[And]Length[next=Take[First[js],1]]==0,js=Rest[js]];
If[Length[js]==0,
{},
next
]
]&
]
]


End[];


EndPackage[];



