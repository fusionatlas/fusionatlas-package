(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["FusionAtlas`ExtractGraphs`",{"FusionAtlas`","FusionAtlas`Bigraphs`","FusionAtlas`GraphPairs`","FusionAtlas`TensorSolver`"}];


ExtractFusionGraphLabels;ExtractFusionGraph;ExtractPairOfBigraphsWithDuals;


Begin["`Private`"];


mkString[{},_]:=""
mkString[{x_},sep_]:=ToString[x];
mkString[{x_,xs__},sep_]:=ToString[x]<>StringJoin[(sep<>ToString[#])&/@{xs}]


matrixToString[matrix_]:=mkString[mkString[#,"x"]&/@matrix,"p"]


lowerTriangular[matrix_]:=Table[matrix[[i,1;;i]],{i,1,Length[matrix]}]


dfgMatrixToString[matrix_]:=StringReplace[ToString[matrix],{"{"->"[","}"->"]"," "->""}]


getTensor[fr:FusionRules[_,{{0,0,0}->_}]]:=fr[[2,1,2]][[All,2,All]];
getTensor[fr:FusionRules[_,{{0,0,0}->_}],generator_]:=fr[[2,1,2]][[All,generator,All]];


getDual[fr:FusionRules[_,{{0,0,0}->_}],object_Integer]:=Module[{tensor=fr[[2,1,2]]},
Position[tensor[[object,All,1]],1][[1,1]]
]


getDuals[fr:FusionRules[_,{{0,0,0}->_}]]:=getDual[fr,#]&/@Range[Length[fr[[2,1,2]]]]


dualOfGenerator[fr:FusionRules[_,{{0,0,0}->_}],generator_Integer:2]:=getDual[fr,generator];


Clear[getDepths]


(*getDepths[tensor_]:=Module[{numberOfObjects},
numberOfObjects=Length[tensor];
(Min[Flatten[Position[Table[MatrixPower[tensor,i],{i,Range[numberOfObjects]-1}]\[LeftDoubleBracket]All,1,#\[RightDoubleBracket],c_Integer/;c>0]]~Join~{\[Infinity]}]-1)&/@Range[numberOfObjects]
]*)


getDepths[tensor_,duals_]:=Module[{depths,currentDepth=-1,currentVector,next},
depths=Table[-1,{Length[tensor]}];
next={};
While[MemberQ[depths,-1],
If[Length[next]==0,
next=Position[depths,-1,1,1][[1]];
next=Union[next~Join~duals[[next]]]; (* dual pairs should be t the same depth *)
++currentDepth;
(depths[[#]]=currentDepth)&/@next;
];
currentVector=If[#==currentDepth,1,0]&/@depths;
next=Flatten[Position[Transpose[{(tensor+Transpose[tensor]).currentVector,depths}],{Except[0],-1},1]];
next=Union[next~Join~duals[[next]]]; (* dual pairs should be t the same depth *)
If[Length[next]>0,
++currentDepth;
(depths[[#]]=currentDepth)&/@next;
];
];
depths
]


Clear[graphDepth]


graphDepth[tensor_,duals_]:=Module[{depths},
depths=getDepths[tensor,duals];
Max[DeleteCases[depths,\[Infinity]]]
]


Clear[dualsAtDepth];
dualsAtDepth[fr:FusionRules[_,{{0,0,0}->_}],depth_]:=dualsAtDepth[fr,depth,2]
dualsAtDepth[fr:FusionRules[_,{{0,0,0}->_}],depth_,generator_Integer:2]:=Module[{dog,tensor,atDepth,duals,depths},
dog=dualOfGenerator[fr,generator];
tensor=getTensor[fr,generator];
duals=getDuals[fr];
depths=getDepths[tensor,duals];
DebugPrint[depths];
atDepth=Flatten[Position[depths,depth,1]];
(*Print[atDepth];*)
Table[Position[atDepth,duals[[atDepth]][[i]]][[1,1]],{i,1,Length[atDepth]}]
]


dualsAtDepth[R,4,3]


(* ExtractFusionGraph and ExtractDirectedGraph and ExtractUndirectedGraph assumes generator is simple. *)


ExtractFusionGraphLabels[fr:FusionRules[_,{{0,0,0}->_}],generator_Integer:2]:=Module[{tensor, depths},
tensor=getTensor[fr,generator];
depths=getDepths[tensor,getDuals[fr]];
Table[Flatten[Position[depths,d,1]],{d,0,Max[DeleteCases[depths,\[Infinity]]]}]
]


ExtractFusionGraph[FusionRules[_,{{0,0,0}->{{{1}}}}]]:="fg1v0"
ExtractFusionGraph[fr:FusionRules[_,{{0,0,0}->_}],generator_Integer:2]:=Module[{tensor,dog,duals,dualsAD},
tensor=getTensor[fr,generator];
DebugPrint["tensor ",tensor];
dog=dualOfGenerator[fr,generator];
DebugPrint["dual of generator ",dog];
duals=getDuals[fr];
dualsAD=Table[dualsAtDepth[fr,i,generator],{i,1,graphDepth[tensor,duals]}];
DebugPrint["duals ",duals];
If[graphDepth[tensor,duals]==0,"fg1v0",If[dog==generator,ExtractUndirectedGraph[tensor,duals,dualsAD],ExtractDirectedGraph[tensor,duals,dualsAD]]]
]


Clear[ExtractDirectedGraph];
ExtractDirectedGraph[tensor_,duals_,dualsAD_]:=Module[{prefix="dfg [1];[[0]];",depths,selfdual,dualString,inclusions,inclusionString,sameDepth,lastDepth,depthOfGraph},
(*If[dualOfGenerator[fr,generator]\[Equal]generator,Print["Generator is self dual. Use ExtractUndirectedGraph." ];Abort[];];*)
depths=getDepths[tensor,duals];
DebugPrint["depths ",depths];
depthOfGraph=graphDepth[tensor,duals];
DebugPrint["depth of graph ",depthOfGraph];
dualString=dfgMatrixToString/@dualsAD;
DebugPrint["duals ",dualString];
inclusions=dfgMatrixToString/@Table[Transpose[tensor[[Flatten[Position[depths,i,1]],Flatten[Position[depths,i+1,1]]]]],{i,0,depthOfGraph-1}];
DebugPrint["inclusions ",inclusions];
sameDepth=dfgMatrixToString[#]&/@Table[Transpose[tensor[[Flatten[Position[depths,i,1]],Flatten[Position[depths,i,1]]]]],{i,1,depthOfGraph}];
DebugPrint["same depth ",sameDepth];
lastDepth=dfgMatrixToString[#]&/@Table[Transpose[tensor[[Flatten[Position[depths,i+1,1]],Flatten[Position[depths,i,1]]]]],{i,0,depthOfGraph-1}];
DebugPrint["last depth ",lastDepth];
prefix<>mkString[Flatten[Transpose[{inclusions,lastDepth,dualString,sameDepth}]],";"]
]


Clear[ExtractUndirectedGraph]
ExtractUndirectedGraph[tensor_,duals_,dualsAD_]:=Module[{prefix="fg1v0v",depths,dualString,depthOfGraph,inclusions,sameDepth},(*If[dualOfGenerator[fr,generator]!=generator,Print["Generator is not self dual. Use ExtractDirectedGraph." ];Abort[];];*)
depths=getDepths[tensor,duals];
DebugPrint["depths ",depths];
depthOfGraph=graphDepth[tensor,duals];
DebugPrint["depth of graph ",depthOfGraph];
dualString=mkString[#,"x"]&/@dualsAD;
DebugPrint["duals ",dualString];
inclusions=matrixToString/@Table[Transpose[tensor[[Flatten[Position[depths,i,1]],Flatten[Position[depths,i+1,1]]]]],{i,0,depthOfGraph-1}];
DebugPrint["inclusions ",inclusions];
sameDepth=matrixToString[lowerTriangular[#]]&/@Table[Transpose[tensor[[Flatten[Position[depths,i,1]],Flatten[Position[depths,i,1]]]]],{i,1,depthOfGraph}];
DebugPrint["same depth ",sameDepth];
prefix<>mkString[Flatten[Transpose[{inclusions,dualString,sameDepth}]],"v"]
]


SetDebugMode[True]


getDual[fr_FusionRules,{l:0|1,r:0|1,generator_Integer}]:=Module[{tensor=({l,r,l}/.fr[[2]])},
{r,l,Position[tensor[[generator,All,1]],1][[1,1]]}
]


dualOfGenerator[fr:FusionRules[_,{{0,0,0}->_,__}],{l:0|1,r:0|1,generator_Integer}]:=getDual[fr,{l,r,generator}];


getDuals[fr:FusionRules[_,{{0,0,0}->_,__}]]:=Module[{numberOfEvenObjects,numberOfOddObjects,numberOfDualEvenObjects,duals00,duals01,duals10,duals11},
numberOfEvenObjects=Length[{0,0,0}/.fr[[2]]];
numberOfOddObjects=Length[{0,1,1}/.fr[[2]]];
numberOfDualEvenObjects=Length[{1,1,1}/.fr[[2]]];
duals00=getDual[fr,{0,0,#}]&/@Range[numberOfEvenObjects];
duals01=getDual[fr,{0,1,#}]&/@Range[numberOfOddObjects];
duals10=getDual[fr,{1,0,#}]&/@Range[numberOfOddObjects];
duals11=getDual[fr,{1,1,#}]&/@Range[numberOfDualEvenObjects];
{{0,0}->duals00,{0,1}->duals01,{1,0}->duals10,{1,1}->duals11}
]


getTensors[fr:FusionRules[_,{{0,0,0}->_,__}],{l:0|1,r:0|1,generator_Integer}]:=Module[{dog,tensor,dualTensor},
dog=dualOfGenerator[fr,{l,r,generator}];
tensor=({l,l,r}/.fr[[2]])[[All,generator,All]];
dualTensor=({l,r,l}/.fr[[2]])[[All,dog[[3]],All]];
{tensor,dualTensor}
]


Clear[getAlternatingDepths];
getAlternatingDepths[tensor_,dualTensor_]:=Module[{numberOfEvenObjects,numberOfOddObjects,evenDepths,oddDepths,kMatrixPower},
kMatrixPower[M_,0]:=IdentityMatrix[Length[M]];
kMatrixPower[M_,n_]:=MatrixPower[M,n];
numberOfEvenObjects=Length[tensor];
numberOfOddObjects=Length[dualTensor];
evenDepths=2(Min[Flatten[Position[Table[kMatrixPower[tensor.dualTensor,i],{i,Range[numberOfEvenObjects]-1}][[All,1,#]],c_Integer/;c>0]]~Join~{\[Infinity]}]-1)&/@Range[numberOfEvenObjects];
oddDepths=2Min[Flatten[Position[Table[tensor.kMatrixPower[dualTensor.tensor,i],{i,Range[numberOfOddObjects]-1}][[All,1,#]],c_Integer/;c>0]]~Join~{\[Infinity]}]-1&/@Range[numberOfOddObjects];
{evenDepths,oddDepths}
]


dualsAtDepth[fr:FusionRules[_,{{0,0,0}->_,__}],depth_/;EvenQ[depth]]:=dualsAtDepth[fr,depth,{0,1,1}];
dualsAtDepth[fr:FusionRules[_,{{0,0,0}->_,__}],depth_/;EvenQ[depth],{l:0|1,r:0|1,generator_Integer}]:=Module[{tensor,dualTensor,atDepth,duals,evenDepths,oddDepths},
(*Print[depths];*)
{tensor,dualTensor}=getTensors[fr,{l,r,generator}];
{evenDepths,oddDepths}=getAlternatingDepths[tensor,dualTensor];
atDepth=Flatten[Position[evenDepths,depth,1]];
(*Print[atDepth];*)
duals=({l,l}/.getDuals[fr])[[atDepth,3]];
Table[Position[atDepth,duals[[i]]][[1,1]],{i,1,Length[atDepth]}]
]


ObjectsAtDepth[fr:FusionRules[_,{{0,0,0}->_,__}],depth_]:=ObjectsAtDepth[fr,depth,{0,1,1}];
ObjectsAtDepth[fr:FusionRules[_,{{0,0,0}->_,__}],depth_,{l:0|1,r:0|1,generator_Integer}]:=Module[{atDepth,tensor,dualTensor,evenDepths,oddDepths},
(*Print[depths];*)
{tensor,dualTensor}=getTensors[fr,{l,r,generator}];
{evenDepths,oddDepths}=getAlternatingDepths[tensor,dualTensor];
atDepth=Flatten[Position[If[EvenQ[depth],evenDepths,oddDepths],depth,1]];
If[depth==generator,{generator}~Join~ DeleteCases[atDepth,generator],atDepth]
]


PermuteFusionRules[fr:FusionRules[_,{{0,0,0}->_,__}],{{0,0}->p00:{__Integer},{0,1}->p01:{__Integer},{1,0}->p10:{__Integer},{1,1}->p11:{__Integer}}]:=
Module[{p},
p[0,0]=p00;
p[0,1]=p01;
p[1,0]=p10;
p[1,1]=p11;
FusionRules[fr[[1]],Flatten[Table[{i,j,k}->({i,j,k}/.fr[[2]])[[p[i,j],p[j,k],p[i,k]]],{i,0,1},{j,0,1},{k,0,1}]]]
]


AlignOddDuals[fr:FusionRules[_,{{0,0,0}->_,__}]]:=Module[{oddDuals,numberOfEvenObjects,numberOfOddObjects,numberOfDualEvenObjects},
oddDuals=({0,1}/.getDuals[fr])[[All,3]];
(*Print[oddDuals];*)
numberOfEvenObjects=Length[{0,0,0}/.fr[[2]]];
numberOfOddObjects=Length[{0,1,1}/.fr[[2]]];
numberOfDualEvenObjects=Length[{1,1,1}/.fr[[2]]];
PermuteFusionRules[fr,{{0,0}->Range[numberOfEvenObjects],{0,1}->Range[numberOfOddObjects],{1,0}->oddDuals,{1,1}->Range[numberOfDualEvenObjects]}]
]


subfactorDualsAtDepthForFCFusionRules[fr:FusionRules[_,{{0,0,0}->_}],depth_,generator_Integer:2]:=Module[{dog,tensor,dualTensor,evenDepths,oddDepths,atDepth,duals},
dog=dualOfGenerator[fr,generator];
tensor=getTensor[fr,generator];
dualTensor=getTensor[fr,dog];
{evenDepths,oddDepths}=getAlternatingDepths[tensor,dualTensor];
atDepth=Flatten[Position[evenDepths,depth,1]];
(*Print[atDepth];*)
duals=getDuals[fr][[atDepth]];
Table[Position[atDepth,duals[[i]]][[1,1]],{i,1,Length[atDepth]}]
]


Clear[ExtractPairOfBigraphsWithDuals];
ExtractPairOfBigraphsWithDuals[fr:FusionRules[_,{{0,0,0}->_,__}]]:=ExtractPairOfBigraphsWithDuals[fr,{0,1,1}];
ExtractPairOfBigraphsWithDuals[fr:FusionRules[_,{{0,0,0}->_,__}],{l:0|1,r:0|1,generator_Integer}]:=
Module[{dog,tensor00,dualTensor00,depthOfGraph00,evenDepths00,oddDepths00,evenDuals00,tensor11,dualTensor11,depthOfGraph11,evenDepths11,oddDepths11,evenDuals11},
dog=dualOfGenerator[fr,{l,r,generator}];
(*Print["dual of generator is ",dog];*)
{tensor00,dualTensor00}=getTensors[fr,{l,r,generator}];
{evenDepths00,oddDepths00}=getAlternatingDepths[tensor00,dualTensor00];
(*Print["depths 00 are ",evenDepths00,oddDepths00];*)
depthOfGraph00=Max[DeleteCases[evenDepths00~Join~oddDepths00,\[Infinity]]];
(*Print["Depth of graph 00 is ",depthOfGraph00];*)
evenDuals00=Table[dualsAtDepth[fr,i,{l,r,generator}],{i,0,depthOfGraph00,2}];
{tensor11,dualTensor11}=getTensors[fr,dog];
{evenDepths11,oddDepths11}=getAlternatingDepths[tensor11,dualTensor11];
(*Print["Depths 11 are ",evenDepths11,oddDepths11];*)
depthOfGraph11=Max[DeleteCases[evenDepths11~Join~oddDepths11,\[Infinity]]];
(*Print["Depth of graph 11 is ",depthOfGraph11];*)
evenDuals11=Table[dualsAtDepth[fr,i,dog],{i,0,depthOfGraph11,2}];
{ExtractBigraphWithDualsFromTensors[tensor00,dualTensor00,evenDuals00],ExtractBigraphWithDualsFromTensors[tensor11,dualTensor11,evenDuals11]}
]
ExtractPairOfBigraphsWithDuals[fr:FusionRules[_,{{0,0,0}->_}],generator_Integer:2]:=
Module[{dog,tensor,dualTensor,depthOfGraph00,evenDepths00,oddDepths00,evenDuals00,tensor11,dualTensor11,depthOfGraph11,evenDepths11,oddDepths11,evenDuals11},
dog=dualOfGenerator[fr,generator];
(*Print["dual of generator is ",dog];*)
tensor=getTensor[fr,generator];
dualTensor=getTensor[fr,dog];
{evenDepths00,oddDepths00}=getAlternatingDepths[tensor,dualTensor];
(*Print["depths 00 are ",evenDepths00,oddDepths00];*)
depthOfGraph00=Max[DeleteCases[evenDepths00~Join~oddDepths00,\[Infinity]]];
(*Print["Depth of graph 00 is ",depthOfGraph00];*)
(* dualsAtDepth is difficult here! *)
evenDuals00=Table[subfactorDualsAtDepthForFCFusionRules[fr,i,generator],{i,0,depthOfGraph00,2}];
{evenDepths11,oddDepths11}=getAlternatingDepths[dualTensor,tensor];
(*Print["Depths 11 are ",evenDepths11,oddDepths11];*)
depthOfGraph11=Max[DeleteCases[evenDepths11~Join~oddDepths11,\[Infinity]]];
(*Print["Depth of graph 11 is ",depthOfGraph11];*)
evenDuals11=Table[subfactorDualsAtDepthForFCFusionRules[fr,i,dog],{i,0,depthOfGraph11,2}];
{ExtractBigraphWithDualsFromTensors[tensor,dualTensor,evenDuals00],ExtractBigraphWithDualsFromTensors[dualTensor,tensor,evenDuals11]}
]


(* odd duals are correct since the order of the objects at each depth is the order they appear in the fusion rules. *)
ExtractBigraphFromTensors[tensor_,dualTensor_]:=Module[{prefix="bwd",depthOfGraph,inclusions01,inclusions10,evenDepths,oddDepths},
{evenDepths,oddDepths}=getAlternatingDepths[tensor,dualTensor];
(*Print[evenDepths,oddDepths];*)
depthOfGraph=Max[DeleteCases[evenDepths~Join~oddDepths,\[Infinity]]];
inclusions01=matrixToString/@Table[Transpose[tensor[[Flatten[Position[evenDepths,i,1]],Flatten[Position[oddDepths,i+1,1]]]]],{i,0,depthOfGraph-1,2}];
(*Print[inclusions01];*)
inclusions10=matrixToString/@Table[Transpose[dualTensor[[Flatten[Position[oddDepths,i,1]],Flatten[Position[evenDepths,i+1,1]]]]],{i,1,depthOfGraph-1,2}];
(*Print[inclusions10];*)
prefix<>mkString[DeleteCases[Flatten[Transpose[{inclusions01,If[Length[inclusions01]==Length[inclusions10],inclusions10,PadRight[inclusions10,Length[inclusions01]]]}]],0],"v"]
]


ExtractBigraphWithDualsFromTensors[tensor_,dualTensor_,evenDuals_]:=ExtractBigraphFromTensors[tensor,dualTensor]<>"duals"<>mkString[mkString[#,"x"]&/@evenDuals,"v"]


End[];


EndPackage[]
