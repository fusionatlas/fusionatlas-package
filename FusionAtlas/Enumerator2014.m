(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["FusionAtlas`Enumerator2014`",{"FusionAtlas`","FusionAtlas`Bigraphs`","FusionAtlas`GraphPairs`","FusionAtlas`Debugging`","FusionAtlas`RemoteInterface`","FusionAtlas`Java`","JLink`"}];


DescendantsTree::usage="DescendantsTree[G, L, k, D, R, ignoring] tries to enumerate all principal graphs starting as G, subject to limits described by L, k, D, R. \n\nAny branches of the tree starting as a graph in ignoring are pruned off. \n\nThe parameter L is the maximum allowed index. Of the parameters k, D, R, any tail sequence may be omitted, corresponding to no restrictions on those parameters. The parameter k, if specified, limits the maximum supertransitivity. The parameter D, if specified, limits the maximum graph depth. The parameter R, if specified, limits the maximum rank."


FindGraphPartners2::usage="FindGraphPartners[g], where g is a GradedBigraph, returns a list of possible pairs of BigraphWithDuals, where g is the underlying GradedBigraph of one element of the pair."


Begin["`Private`"];


LoadJavaClass["net.tqft.toolkit.algebra.principalgraphs.BigraphWithDuals$"];
LoadJavaClass["net.tqft.toolkit.algebra.principalgraphs.PairOfBigraphsWithDuals$"];
LoadJavaClass["net.tqft.toolkit.algebra.principalgraphs.SubfactorWeed$"];


SubfactorWeed[a___]:=net`tqft`toolkit`algebra`principalgraphs`SubfactorWeed$`MODULE$[apply[a]]


AsScalaObject[S_String/;StringTake[S,3]=="bwd"]:=net`tqft`toolkit`algebra`principalgraphs`BigraphWithDuals$`MODULE$[apply[S]]


AsScalaObject[G_BigraphWithDuals]:=net`tqft`toolkit`algebra`principalgraphs`BigraphWithDuals$`MODULE$[apply[GraphToString[G]]]


AsScalaObject[{X_BigraphWithDuals,Y_BigraphWithDuals}]:=AsScalaObject[AsScalaObject/@{X,Y}]
AsScalaObject[{X_String,Y_String}/;StringTake[X,3]=="bwd"\[And]StringTake[Y,3]=="bwd"]:=AsScalaObject[AsScalaObject/@{X,Y}]
AsScalaObject[{X_?JavaObjectQ,Y_?JavaObjectQ}/;InstanceOf[X,"net.tqft.toolkit.algebra.principalgraphs.BigraphWithDuals"]\[And]InstanceOf[Y,"net.tqft.toolkit.algebra.principalgraphs.BigraphWithDuals"]]:=net`tqft`toolkit`algebra`principalgraphs`PairOfBigraphsWithDuals$`MODULE$[apply[X,Y]]


Clear[RemoveDuplicates]
RemoveDuplicates[graphs_]:=Union[{Sort[{AsScalaObject[#]@canonicalNautyGraph[]@toString[],AsScalaObject[Reverse[#]]@canonicalNautyGraph[]@toString[]}],#}&/@graphs,SameTest->(#1[[1]]===#2[[1]]&)][[All,2]]


unpackWeed[weed_]:={weed@pair[]@graph[0]@toString[],weed@pair[]@graph[1]@toString[]}


DescendantsTree::usage="DescendantsTree[G, L, k, D, R, ignoring] tries to enumerate all principal graphs starting as G, subject to limits described by L, k, D, R. \n\nAny branches of the tree starting as a graph in ignoring are pruned off. \n\nThe parameter L is the maximum allowed index. Of the parameters k, D, R, any tail sequence may be omitted, corresponding to no restrictions on those parameters. The parameter k, if specified, limits the maximum supertransitivity. The parameter D, if specified, limits the maximum graph depth. The parameter R, if specified, limits the maximum rank."


Clear[DescendantsTree]
DescendantsTree[G_,L_,k:_Integer:(-1),D:_Integer:(-1),R:_Integer:(-1),ignoring:{{_,_}...}:{}]:=(*DescendantsTree[G,L,k,D,R,ignoring]=*)
Module[{ignoring0,ignoringArray,partClass,i,nextGraphFromIterator,extractTree,vines,cylinders,result,cell1},
cell1=PrintTemporary["Running DescendantsTree[",G,", ...]"];
nextGraphFromIterator[w_]:=JavaBlock[Module[{g=w@next[],h},
h=unpackWeed[g@U1[]];
If[g@U1[]@pair[]@persistentlyCylindricalU$qmark[],AppendTo[cylinders,h]];
If[FullOcneanuTest[h]\[And]ScalaTriplePointObstruction[GraphFromString/@h],AppendTo[vines,h]];
h->(unpackWeed/@scala`collection`JavaConversions`seqAsJavaList[g@U2[]]@toArray[])
]];
extractTree[w_]:=Module[{counter=0,cell0,graph,result2,H},
cell0=PrintTemporary[Dynamic["Found "<>ToString[counter]<>" graphs..."]];
cylinders={};
vines={};
result2=Reap[While[w@hasNext[],counter++;H=nextGraphFromIterator[w];(*lastGraph=H\[LeftDoubleBracket]1\[RightDoubleBracket];*)
Sow[H]]][[2,1]];
NotebookDelete[cell0];
result2
];

ignoring0=Union[ignoring,Reverse/@ignoring];
LoadJavaClass["com.wolfram.jlink.JLinkClassLoader"];
partClass=JLinkClassLoader`classFromName["net.tqft.toolkit.algebra.principalgraphs.PairOfBigraphsWithDuals"];
LoadJavaClass["java.lang.reflect.Array"];
ignoringArray=ReturnAsJavaObject@Array`newInstance[partClass,Length[ignoring0]];
For[i=0,i<Length[ignoring0],i++,Array`set[ignoringArray,i,AsScalaObject[GraphToString/@ignoring0[[i+1]]]]];
result={
extractTree[SubfactorWeed[L,AsScalaObject[G]]@descendantsTreeFiltered[k,D,R,scala`collection`JavaConversions`asScalaBuffer[java`util`Arrays`asList[ignoringArray]]@toList[],True]],
vines,
cylinders
};
NotebookDelete[cell1];
result
]


double[g_GradedBigraph]:=Module[{G=BigraphWithDuals[g,DualData@@Table[Range[RankAtDepth[g,d]],{d,0,GraphDepth[g],2}]]},
{G,G}]


isomorphicQ[g_GradedBigraph,h_GradedBigraph]:=Length[RemoveDuplicates[{double[g],double[h]}]]==1


FindGraphPartners2[g_GradedBigraph]:=Module[{
gs,
D=2,
graphs={{"bwd1vduals1v","bwd1vduals1v"}},
L=DimensionOfGenerator[g]^2+0.0001},
While[D<=GraphDepth[g],
gs=Truncate[g,D];
graphs=Function[{G},(*Print[G];*)DescendantsTree[G,L,DepthOfBranchPoint[g],D]]/@graphs;
graphs=Union[Cases[graphs,h:{h1_String,h2_String}/;GraphDepth[h]==D\[And](isomorphicQ[gs,GraphFromString[h1][[1]]]||isomorphicQ[gs,GraphFromString[h2][[1]]]),\[Infinity]
]];
D++;
];
Cases[graphs,h_/;FullOcneanuTest@@h]
]


End[];


EndPackage[];
