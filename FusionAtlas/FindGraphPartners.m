(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["FusionAtlas`FindGraphPartners`",{"FusionAtlas`","FusionAtlas`Java`","FusionAtlas`Bigraphs`","FusionAtlas`GraphPairs`","FusionAtlas`DisplayGraphs`","FusionAtlas`Debugging`","JLink`"}];


FindGraphPartners::usage="";
FindWeedPartners;


Begin["`Private`"];


(* make sure Scala gets loaded *)
FusionAtlasScalaDirectory[]


AsOldScalaObject[g_GradedBigraph]:=org`fusionatlas`graphs`Bigraph$`MODULE$@apply[GraphToString[g]]
AsOldScalaObject[g_BigraphWithDuals]:=org`fusionatlas`graphs`BigraphWithDuals$`MODULE$@apply[GraphToString[g]]
AsOldScalaObject[{g1_BigraphWithDuals,g2_BigraphWithDuals}]:=org`fusionatlas`graphs`PairOfBigraphsWithDuals$`MODULE$@apply[GraphToString[g1],GraphToString[g2]]


GraphIsomorphicQ[G1:{__BigraphWithDuals},G2:{__BigraphWithDuals}]:=AsOldScalaObject[G1]@isIsomorphicTo[AsOldScalaObject[G2]]


TrivialDualData[g_GradedBigraph]:=BigraphWithDuals[g,DualData@@Table[Range[1,RankAtDepth[g,i]],{i,0,GraphDepth[g],2}]]


GraphIsomorphicQ[g1_GradedBigraph,g2_GradedBigraph]:=With[{h1=TrivialDualData[g1],h2=TrivialDualData[g2]},
GraphIsomorphicQ[{h1,h1},{h2,h2}]]


enumerator:=(LoadJavaClass["org.fusionatlas.enumerators.InMemoryPairEnumerator$","AllowShortContext"->False];org`fusionatlas`enumerators`InMemoryPairEnumerator$`MODULE$);


roundUp[x_]:=N[Ceiling[x,Power[10,-5]]]


ExtendOneDepth[d_,G:{__BigraphWithDuals}]:=FromScalaObject[enumerator@extend[d,AsOldScalaObject[G],AsScalaOption[{}]]]


ExtendOneDepthMatching[d_,G:{__BigraphWithDuals},g_GradedBigraph]:=Cases[#,H_/;Or[GraphIsomorphicQ[H[[1,1]],Truncate[g,GraphDepth[G[[1]]]+1]],GraphIsomorphicQ[H[[2,1]],Truncate[g,GraphDepth[G[[1]]]+1]]]]&/@ExtendOneDepth[d,G]


ExtendOneDepthMatching[d_,G:{__BigraphWithDuals},g_GradedBigraph]:=Module[{cases},cases=Cases[#,H_/;Or[GraphIsomorphicQ[H[[1,1]],Truncate[g,GraphDepth[G[[1]]]+1]],GraphIsomorphicQ[H[[2,1]],Truncate[g,GraphDepth[G[[1]]]+1]]]]&/@ExtendOneDepth[d,G];
cases
]


ExtendOneDepthMatching[d_,Gs:{{__BigraphWithDuals}...},g_GradedBigraph]:=Module[{vines,weeds,extend},
extend=ExtendOneDepthMatching[d,#,g]&/@Gs;
vines=Flatten[extend[[All,1]],1];
weeds=Flatten[extend[[All,2]],1];
{vines,weeds}
]


FindGraphPartners[g_GradedBigraph]:=FindGraphPartners[g]=Module[{branch=DepthOfBranchPoint[g],d=roundUp[DimensionOfGenerator[g]],weeds,vines,otherVines,finalWeeds},
weeds=Nest[ExtendOneDepthMatching[d,#,g][[2]]&,{{TrivialDualData[AnBigraph[branch+1]],TrivialDualData[AnBigraph[branch+1]]}},GraphDepth[g]-branch-1];
vines=ExtendOneDepthMatching[d,weeds,g][[1]];
finalWeeds=ExtendOneDepthMatching[d,weeds,g][[2]];
otherVines=ExtendOneDepthMatching[d,finalWeeds,g][[1]];
Select[vines~Join~otherVines,ScalaTriplePointObstruction]
]


FindWeedPartners[g_GradedBigraph]:=FindWeedPartners[g]=Module[{branch=DepthOfBranchPoint[g],d=roundUp[DimensionOfGenerator[g]],weeds},
weeds=Nest[ExtendOneDepthMatching[d,#,g][[2]]&,{{TrivialDualData[AnBigraph[branch+1]],TrivialDualData[AnBigraph[branch+1]]}},GraphDepth[g]-branch]
]


End[];


EndPackage[];
