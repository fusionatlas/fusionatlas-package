package org.fusionatlas.enumerators

import org.scalatest.FlatSpec
import org.scalatest.matchers.ShouldMatchers
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

import org.fusionatlas.graphs._

import scala.math._

@RunWith(classOf[JUnitRunner])
class ImmediatePairClassifierTest extends FlatSpec with ShouldMatchers {

  "ImmediatePairClassifier" should "extend a graph with multiple vertices at depth 0" in {
    val TwoA1s = "bwd1x0p0x1duals1x2"
    new ImmediatePairClassifier(2.28825, Nil).extend(PairOfBigraphsWithDuals(TwoA1s, TwoA1s))
    val G4 = PairOfBigraphsWithDuals("bwd0x1p1x0p1x0p0x1v1x0x0x0p0x0x1x0v0x1p1x0p1x0p0x1v1x0x0x0p0x0x1x0duals1x2v2x1v1x2", "bwd0x1x0x0x0x0x0x0p0x0x0x1x0x0x0x0p0x0x0x0x0x1x0x0p0x0x0x0x0x0x0x1v1x0x0x0p1x0x0x0p0x1x0x0p0x1x0x0p0x0x1x0p0x0x1x0p0x0x0x1p0x0x0x1v0x1x0x0x0x0x0x0p0x0x0x1x0x0x0x0p0x0x0x0x0x1x0x0p0x0x0x0x0x0x0x1v1x0x0x0p1x0x0x0p0x1x0x0p0x1x0x0p0x0x1x0p0x0x1x0p0x0x0x1p0x0x0x1duals4x6x7x1x8x2x3x5v8x2x3x5x4x6x7x1v4x6x7x1x8x2x3x5")
    val G8 = PairOfBigraphsWithDuals("bwd0x1p1x0p1x0p0x1v1x0x0x0p0x0x1x0v0x1p1x0p1x0p0x1v1x0x0x0p0x0x1x0v0x1p1x0p1x0p0x1v1x0x0x0p0x0x1x0v0x1p1x0p1x0p0x1v1x0x0x0p0x0x1x0duals1x2v2x1v1x2v2x1v1x2", "bwd0x1x0x0x0x0x0x0p0x0x0x1x0x0x0x0p0x0x0x0x0x1x0x0p0x0x0x0x0x0x0x1v1x0x0x0p1x0x0x0p0x1x0x0p0x1x0x0p0x0x1x0p0x0x1x0p0x0x0x1p0x0x0x1v0x1x0x0x0x0x0x0p0x0x0x1x0x0x0x0p0x0x0x0x0x1x0x0p0x0x0x0x0x0x0x1v1x0x0x0p1x0x0x0p0x1x0x0p0x1x0x0p0x0x1x0p0x0x1x0p0x0x0x1p0x0x0x1v0x1x0x0x0x0x0x0p0x0x0x1x0x0x0x0p0x0x0x0x0x1x0x0p0x0x0x0x0x0x0x1v1x0x0x0p1x0x0x0p0x1x0x0p0x1x0x0p0x0x1x0p0x0x1x0p0x0x0x1p0x0x0x1v0x1x0x0x0x0x0x0p0x0x0x1x0x0x0x0p0x0x0x0x0x1x0x0p0x0x0x0x0x0x0x1v1x0x0x0p1x0x0x0p0x1x0x0p0x1x0x0p0x0x1x0p0x0x1x0p0x0x0x1p0x0x0x1duals4x6x7x1x8x2x3x5v8x2x3x5x4x6x7x1v4x6x7x1x8x2x3x5v8x2x3x5x4x6x7x1v4x6x7x1x8x2x3x5")
    def G(k: Int) = PairOfBigraphsWithDuals(
      "bwd" + List.fill(k)("0x1p1x0p1x0p0x1v1x0x0x0p0x0x1x0v0x1p1x0p1x0p0x1v1x0x0x0p0x0x1x0").mkString("v") + "duals1x2" + List.fill(k)("v2x1v1x2").mkString,
      "bwd" + List.fill(k)("0x1x0x0x0x0x0x0p0x0x0x1x0x0x0x0p0x0x0x0x0x1x0x0p0x0x0x0x0x0x0x1v1x0x0x0p1x0x0x0p0x1x0x0p0x1x0x0p0x0x1x0p0x0x1x0p0x0x0x1p0x0x0x1v0x1x0x0x0x0x0x0p0x0x0x1x0x0x0x0p0x0x0x0x0x1x0x0p0x0x0x0x0x0x0x1v1x0x0x0p1x0x0x0p0x1x0x0p0x1x0x0p0x0x1x0p0x0x1x0p0x0x0x1p0x0x0x1").mkString("v") + "duals4x6x7x1x8x2x3x5" + List.fill(k)("v8x2x3x5x4x6x7x1v4x6x7x1x8x2x3x5").mkString)
      println(G4)
      println(G(1))
    require(G(1) == G4)
    require(G(2) == G8)
    for (k <- 1 to 20) {
      println(G(k).gg0.bigraph.FPEigenvalueLowerBounds(5))
      println(G(k).gg1.bigraph.FPEigenvalueLowerBounds(5))
    }
    new ImmediatePairClassifier(2.2383, Nil).extend(G(20))
    //    new ImmediatePairClassifier(2.27338, Nil).extend(G)
  }

  "ImmediatePairClassifier" should "save stuff to the database" in {
    new ImmediatePairClassifier(2.44949, Nil).extend(PairOfBigraphsWithDuals("bwd1v1p1duals1v2x1", "bwd1v1p1duals1v2x1"))
  }
}